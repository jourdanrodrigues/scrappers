import Head from 'next/head';
import React from 'react';
import styled from '@emotion/styled';
import { Registries } from '@/registries';
import { Button, MultiSelect, Select, TextInput } from '@mantine/core';
import { useForm } from '@mantine/form';
import axios, { AxiosError } from 'axios';
import { showNotification } from '@mantine/notifications';
import { useMutation } from '@tanstack/react-query';
import { ZodError } from 'zod';

type TFormData = {
  emails: string[];
  registryId: number | null;
  number: string;
  password: string;
  type: number | null;
};

const marginTop = { marginTop: '1rem' };

const emailRegex =
  /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

const Main = styled.main`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
  width: 100%;
  margin-bottom: 1rem;
`;

const Form = styled.form`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 23rem;

  > * {
    width: 100%;
  }
`;

const registries = Registries.getAll();

export default function Home() {
  const form = useForm<TFormData>({
    initialValues: {
      emails: [],
      registryId: null,
      type: null,
      number: '',
      password: '',
    },
    validateInputOnChange: true,
    validate: {
      registryId: (value) => (value ? null : 'Selecione um cartório'),
      type: (value) => (value ? null : 'Selecione um tipo de solicitação'),
      number: (value) => (value ? null : 'Digite o número da solicitação'),
      password: (value) => (value ? null : 'Digite a senha da solicitação'),
      emails: (emails) => {
        const invalid = emails.filter((email) => !emailRegex.test(email));
        const emailText = invalid.join('", "');
        return invalid.length > 0
          ? invalid.length === 1
            ? `O email "${emailText}" é inválido`
            : `Os emails "${emailText}" são inválidos`
          : null;
      },
    },
  });

  const submitMutation = useMutation(
    ['submit'],
    (values: TFormData) =>
      axios.post<{ message: string }>('/api/requisitions', values),
    {
      onSuccess: (response) => {
        const { message } = response.data;
        showNotification({ message, color: 'green' });
      },
      onError: (error: AxiosError<{ message: string } | ZodError>) => {
        const message = error.response?.data?.message;
        if (message) {
          return showNotification({ message, color: 'red' });
        }
        // Handle ZodError
      },
    }
  );

  const hasError = Object.keys(form.errors).length > 0;
  const { registryId, emails } = form.values;
  const registry = registryId ? Registries.getById(registryId) : null;

  const { onChange: onEmailsChange, ...emailsProps } =
    form.getInputProps('emails');
  const submit = form.onSubmit((values) => submitMutation.mutate(values));
  return (
    <>
      <Head>
        <title>Scrappers</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main>
        <div>Notificações de cartórios</div>
        <Form onSubmit={submit}>
          <Select
            style={marginTop}
            label="Cartório"
            required
            data={registries.map(({ id, name }) => ({
              value: '' + id,
              label: name,
            }))}
            {...form.getInputProps('registryId')}
          />
          {registry && (
            <>
              <Select
                style={marginTop}
                label="Tipo de Solicitação"
                required
                data={registry.requisitionTypes.map(({ title, value }) => ({
                  value: '' + value,
                  label: title,
                }))}
                {...form.getInputProps('type')}
              />
              <TextInput
                label="Número da Solicitação"
                required
                style={marginTop}
                {...form.getInputProps('number')}
              />
              <TextInput
                label="Senha"
                required
                style={marginTop}
                {...form.getInputProps('password')}
              />
              <MultiSelect
                data={emails}
                style={marginTop}
                label="Emails para serem notificados"
                placeholder="Adicione emails"
                searchable
                creatable
                getCreateLabel={(query) => `+ Adicionar "${query}"`}
                onChange={(values) => {
                  onEmailsChange(values.map((value) => value.toLowerCase()));
                }}
                {...emailsProps}
              />
              <Button
                style={marginTop}
                loading={submitMutation.isLoading}
                disabled={hasError || submitMutation.isLoading}
                type="submit"
              >
                Salvar
              </Button>
            </>
          )}
        </Form>
      </Main>
    </>
  );
}
